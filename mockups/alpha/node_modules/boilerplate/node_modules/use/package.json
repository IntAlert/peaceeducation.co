{
  "name": "use",
  "description": "Easily add plugin support to your node.js application.",
  "version": "1.1.2",
  "homepage": "https://github.com/jonschlinkert/use",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jonschlinkert/use"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/use/issues"
  },
  "license": "MIT",
  "files": [
    "index.js"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "define-property": "^0.2.5",
    "isobject": "^2.0.0"
  },
  "devDependencies": {
    "base-plugins": "^0.4.1",
    "gulp": "^3.9.0",
    "gulp-eslint": "^1.1.0",
    "gulp-istanbul": "^0.10.2",
    "gulp-mocha": "^2.1.3",
    "mocha": "*"
  },
  "verb": {
    "related": {
      "list": [
        "base-methods",
        "ware"
      ]
    }
  },
  "readme": "# use [![NPM version](https://badge.fury.io/js/use.svg)](http://badge.fury.io/js/use)  [![Build Status](https://travis-ci.org/jonschlinkert/use.svg)](https://travis-ci.org/jonschlinkert/use)\n\n> Easily add plugin support to your node.js application.\n\nA different take on plugin handling! This is not a middleware system, if you need something that handles async middleware, [ware](https://github.com/segmentio/ware) is great for that.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/)\n\n```sh\n$ npm i use --save\n```\n\n## Usage\n\n```js\nvar use = require('use');\n```\n\nSee the [examples folder](./examples) for usage examples.\n\n## API\n\n### [.use](index.js#L48)\n\nDefine a plugin function to be passed to use. The only parameter exposed to the plugin is `app`, the object or function. passed to `use(app)`. `app` is also exposed as `this` in plugins.\n\nAdditionally, **if a plugin returns a function, the function will\nbe pushed onto the `fns` array**, allowing the plugin to be\ncalled at a later point by the `run` method.\n\n**Params**\n\n* `fn` **{Function}**: plugin function to call\n\n**Example**\n\n```js\nvar use = require('use');\n\n// define a plugin\nfunction foo(app) {\n  // do stuff\n}\n\nvar app = function(){};\nuse(app);\n\n// register plugins\napp.use(foo);\napp.use(bar);\napp.use(baz);\n```\n\n### [.run](index.js#L64)\n\nRun all plugins on `fns`. Any plugin that returns a function when called by `use` is pushed onto the `fns` array.\n\n**Params**\n\n* `value` **{Object}**: Object to be modified by plugins.\n* `returns` **{Object}**: Returns the object passed to `run`\n\n**Example**\n\n```js\nvar config = {};\napp.run(config);\n```\n\n## Similar projects\n\n* [base-methods](https://www.npmjs.com/package/base-methods): Starter for creating a node.js application with a handful of common methods, like `set`, `get`,… [more](https://www.npmjs.com/package/base-methods) | [homepage](https://github.com/jonschlinkert/base-methods)\n* [ware](https://www.npmjs.com/package/ware): Easily create your own middleware layer. | [homepage](https://github.com/segmentio/ware)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/use/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 Jon Schlinkert\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on November 10, 2015._",
  "readmeFilename": "README.md",
  "_id": "use@1.1.2",
  "_shasum": "6e3832feb8689573494ac6a7acb5fefb377b2cd1",
  "_from": "use@^1.1.2",
  "_resolved": "https://registry.npmjs.org/use/-/use-1.1.2.tgz"
}
