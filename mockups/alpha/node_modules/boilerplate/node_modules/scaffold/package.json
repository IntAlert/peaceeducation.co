{
  "name": "scaffold",
  "description": "Conventions and API for creating declarative configuration objects for project scaffolds - similar in format to a grunt task, but more portable, generic and can be used by any build system or generator - even gulp.",
  "version": "0.2.5",
  "homepage": "https://github.com/jonschlinkert/scaffold",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jonschlinkert/scaffold"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/scaffold/issues"
  },
  "license": "MIT",
  "files": [
    "index.js",
    "utils.js"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "gulp"
  },
  "dependencies": {
    "define-property": "^0.2.5",
    "expand-target": "^0.5.3",
    "expand-utils": "^0.1.4",
    "extend-shallow": "^2.0.1",
    "is-scaffold": "^0.1.1",
    "lazy-cache": "^1.0.3",
    "use": "^1.1.2"
  },
  "devDependencies": {
    "global-modules": "^0.2.0",
    "gulp": "^3.9.0",
    "gulp-eslint": "^1.1.1",
    "gulp-format-md": "^0.1.4",
    "gulp-istanbul": "^0.10.0",
    "gulp-mocha": "^2.1.3",
    "mocha": "*",
    "repeat-string": "^1.5.2",
    "should": "*",
    "stringify-object": "git://github.com/jonschlinkert/stringify-object"
  },
  "keywords": [
    "app",
    "boilerplate",
    "boilerplates",
    "bootstrap",
    "build",
    "cli",
    "dev",
    "development",
    "framework",
    "generate",
    "generator",
    "grunt",
    "gulpfriendly",
    "plugin",
    "project",
    "scaffold",
    "scaffolding",
    "skeleton",
    "start",
    "starter",
    "system",
    "template",
    "tool",
    "toolkit",
    "yeoman"
  ],
  "verb": {
    "related": {
      "list": [
        "assemble",
        "boilerplate",
        "generate",
        "templates",
        "update",
        "verb"
      ]
    },
    "reflinks": [
      "assemble",
      "boilerplate",
      "expand-files",
      "expand-target",
      "grunt",
      "gulp",
      "metalsmith",
      "scaffold",
      "templates",
      "verb",
      "yeoman"
    ],
    "plugins": [
      "gulp-format-md"
    ]
  },
  "readme": "# scaffold [![NPM version](https://img.shields.io/npm/v/scaffold.svg)](https://www.npmjs.com/package/scaffold)\n\n> Conventions and API for creating declarative configuration objects for project scaffolds - similar in format to a grunt task, but more portable, generic and can be used by any build system or generator - even gulp.\n\n[What is a scaffold?](#what-is-a-scaffold) | [gulp-scaffold-example](https://github.com/jonschlinkert/gulp-scaffold-example)\n\n- [The goal](#the-goal)\n- [Install](#install)\n- [Usage](#usage)\n- [Examples](#examples)\n- [API](#api)\n- [What is a scaffold?](#what-is-a-scaffold-)\n  * [Comparison table](#comparison-table)\n- [Related projects](#related-projects)\n- [Tests](#tests)\n  * [Test coverage](#test-coverage)\n  * [Running tests](#running-tests)\n- [Contributing](#contributing)\n- [Author](#author)\n- [License](#license)\n\n_(TOC generated by [verb](https://github.com/verbose/verb) using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))_\n\n## The goal\n\nMainly the following two things:\n\n1. Make it easy to create and publish project scaffolds with reusable templates, styles, themes, data etc.\n2. To uncouple these \"non-moving-parts\", which can easily be described using a declarative configuration, from any particular build system or generator.\n\n_(To see the opposite of what this project hopes to achieve, take a look at a generator from [Google's Yeoman](http://yeoman.io). Yeoman is a node.js application that generates projects from \"scaffolding\", which includes templates, project metadata, and so on. But it does so in a way that completely couples these things with application logic, making it difficult or tedious to make the components reusable by anything but yeoman)_.\n\n**Example**\n\nThe following scaffold \"expands\" into a configuration object that can be passed to [gulp](http://gulpjs.com), [grunt](http://gruntjs.com/), [assemble](http://assemble.io), [metalsmith](https://github.com/segmentio/metalsmith), or even [yeoman](http://yeoman.io) for scaffolding out various parts of a blog or site (like adding a new post, UI component, etc):\n\n```js\nvar Scaffold = require('scaffold');\nvar scaffold = new Scaffold({\n  posts: {\n    src: 'templates/post.md',\n    dest: 'blog/' \n  },\n  components: {\n    cwd: 'content',\n    src: ['templates/*.hbs'],\n    dest: 'blog/'\n  }  \n});\n```\n\n**Example result**\n\nThe above scaffold might expand into something like the following:\n\n```js\n{\n  options: {},\n  blog: {\n    options: {cwd: 'blog'},\n    files: [\n      {\n        src: ['content/post.md', 'content/about.md'],\n        dest: 'src/posts/'\n      },\n      {\n        src: ['data/ipsum.json'],\n        dest: 'src/data/'\n      }\n    ]\n  },\n  components: {\n    options: {cwd: 'ui'},\n    files: [\n      {\n        options: {cwd: 'templates/layouts'},\n        src: ['default.hbs', '3-column.hbs'],\n        dest: 'src/templates/layouts'\n      },\n      {\n        options: {cwd: 'templates/components'},\n        src: ['button.hbs', 'modal.hbs', 'navbar.hbs'],\n        dest: 'src/templates/partials'\n      },\n      {\n        src: ['scripts/button.js'],\n        dest: 'src/assets/js/'\n      },\n      {\n        src: ['data/ipsum.json'],\n        dest: 'src/assets/data/'\n      }\n    ]\n  }\n}\n```\n\nSince we're just creating an object (with zero application logic), anything can obviously be extended, overridden, etc.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm i scaffold --save\n```\n\n## Usage\n\nCreate an instance of scaffold:\n\n```js\nvar Scaffold = require('scaffold');\nvar foo = new Scaffold({\n  // config/options here  \n});\n```\n\nScaffold uses [expand-target](https://github.com/jonschlinkert/expand-target) and [expand-files](https://github.com/jonschlinkert/expand-files) as dependencies. Visit those projects for the full range of available features and options:\n\n## Examples\n\nThe following are just a few random examples of what a scaffold could be, but there are many more use cases.\n\n**Blog posts**\n\nCreate a scaffold for adding blog posts to a project:\n\n```js\nvar blog = new Scaffold({\n  post: {\n    cwd: 'content',\n    src: 'content/post.md', \n    dest: 'src/posts/'\n  }\n});\n```\n\n**UI components**\n\nCreate a scaffold for adding UI components to a project:\n\n```js\nvar components = new Scaffold({\n  foo: {\n    options: {cwd: 'scaffolds'},\n    files: [\n      {src: 'templates/component.hbs', dest: 'src/templates/'},\n      {src: 'scripts/component.js', dest: 'src/scripts/'},\n      {src: 'styles/component.css', dest: 'src/styles/'},\n    ]\n  }\n});\n```\n\n## API\n\n### [Scaffold](index.js#L28)\n\nCreate a new Scaffold with the given `options`\n\n**Params**\n\n* `options` **{Object}**\n\n**Example**\n\n```js\nvar scaffold = new Scaffold({cwd: 'src'});\nscaffold.addTargets({\n  site: {src: ['*.hbs']},\n  blog: {src: ['*.md']}\n});\n```\n\n### [.addTargets](index.js#L68)\n\nAdd targets to the scaffold, while also normalizing src-dest mappings and expanding glob patterns in each target.\n\n**Params**\n\n* `scaffold` **{Object}**: Scaffold object with targets, `options`, or arbitrary properties.\n* `returns` **{Object}**\n\n**Example**\n\n```js\nscaffold.addTargets({\n  site: {src: '*.hbs', dest: 'templates/'},\n  docs: {src: '*.md', dest: 'content/'}\n});\n```\n\n### [.addTarget](index.js#L108)\n\nAdd a single target to the scaffold, while also normalizing src-dest mappings and expanding glob patterns in the target.\n\n**Params**\n\n* `name` **{String}**\n* `config` **{Object}**\n* `returns` **{Object}**\n\n**Example**\n\n```js\nscaffold.addTarget('foo', {\n  src: 'templates/*.hbs',\n  dest: 'site'\n});\n\n// other configurations are possible\nscaffold.addTarget('foo', {\n  options: {cwd: 'templates'}\n  files: [\n    {src: '*.hbs', dest: 'site'},\n    {src: '*.md', dest: 'site'}\n  ]\n});\n```\n\n## What is a scaffold?\n\nA scaffold consists of one or more templates or source files and serves as a \"temporary support structure\" that may be used to initialize a new project, or to provide ad-hoc \"components\" throughout the duration of a project.\n\n**What does this project do?**\n\nGiven the above definition, this project provides an API for creating configuration objects with various details about a scaffold, such as source file paths or glob patterns, destination paths, default settings, and so on.\n\nThe resulting object could be described as a \"scaffold configuration\" or \"scaffold manifest\".\n\n### Comparison table\n\nThe following table describes the difference between boilerplates, scaffolds and templates.\n\n| **type** | **description** |\n| --- | --- |\n| [template](https://github.com/jonschlinkert/templates) | Resuable file, code or content which contains \"placeholder\" values that will eventually be replaced with real values by a rendering (template) engine |\n| [scaffold](#scaffold) | Consists of one or more templates or source files and serves as a \"temporary support structure\" that may be used to initialize a new project, or to provide ad-hoc \"components\" throughout the duration of a project. |\n| [boilerplate](https://github.com/boilerplates) | Boilerplates consist of all of the necessary files required to initialize a complete project. |\n\n## Related projects\n\n* [assemble](https://www.npmjs.com/package/assemble): Assemble is a powerful, extendable and easy to use static site generator for node.js. Used… [more](https://www.npmjs.com/package/assemble) | [homepage](https://github.com/assemble/assemble)\n* [boilerplate](https://www.npmjs.com/package/boilerplate): Tools and conventions for authoring and publishing boilerplates that can be generated by any build… [more](https://www.npmjs.com/package/boilerplate) | [homepage](http://boilerplates.io)\n* [generate](https://www.npmjs.com/package/generate): Fast, composable, highly extendable project generator for node.js | [homepage](https://github.com/jonschlinkert/generate)\n* [templates](https://www.npmjs.com/package/templates): System for creating and managing template collections, and rendering templates with any node.js template engine.… [more](https://www.npmjs.com/package/templates) | [homepage](https://github.com/jonschlinkert/templates)\n* [update](https://www.npmjs.com/package/update): Update | [homepage](https://github.com/jonschlinkert/update)\n* [verb](https://www.npmjs.com/package/verb): Documentation generator for GitHub projects. Verb is extremely powerful, easy to use, and is used… [more](https://www.npmjs.com/package/verb) | [homepage](https://github.com/verbose/verb)\n\n## Tests\n\n### Test coverage\n\nAs of January 06, 2016:\n\n```\nStatements   : 100% (29/29)\nBranches     : 100% (18/18)\nFunctions    : 100% (3/3)\nLines        : 100% (28/28)\n```\n\n### Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/scaffold/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2016 [Jon Schlinkert](https://github.com/jonschlinkert)\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb](https://github.com/verbose/verb) on January 06, 2016._",
  "readmeFilename": "README.md",
  "_id": "scaffold@0.2.5",
  "_shasum": "73c88405464cf7eeac392060b617f75ddd8417dd",
  "_from": "scaffold@^0.2.5",
  "_resolved": "https://registry.npmjs.org/scaffold/-/scaffold-0.2.5.tgz"
}
